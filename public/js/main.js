/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ (function() {

eval("const marquee = document.querySelector('.marquee');\r\nif (marquee) {\r\n  window.addEventListener('load', Marquee('.marquee', 0.2))\r\n  function Marquee(selector, speed) {\r\n    if (marquee) {\r\n      const parentSelector = document.querySelector(selector);\r\n      const clone = parentSelector.innerHTML;\r\n      const firstElement = parentSelector.children[0];\r\n      let i = 0;\r\n      parentSelector.insertAdjacentHTML('beforeend', clone);\r\n      parentSelector.insertAdjacentHTML('beforeend', clone);\r\n\r\n      setInterval(function () {\r\n        firstElement.style.marginLeft = `-${i}px`;\r\n        if (i > firstElement.clientWidth) {\r\n          i = 0;\r\n        }\r\n        i = i + speed;\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\nconst burgerButton = document.querySelector('.header__burger');\r\nconst menu = document.querySelector('.mobile-menu');\r\n\r\nburgerButton.addEventListener('click', function () {\r\n  burgerButton.classList.toggle('active');\r\n  menu.classList.toggle('menu--active');\r\n});\r\n\r\nconst tabButtons = document.querySelectorAll('.main-services__link');\r\nconst tabs = document.querySelectorAll('.main-services__tab');\r\n\r\nif (tabButtons.length > 0) {\r\n\r\n  tabButtons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n      const selectedTab = button.dataset.tab;\r\n      activateTab(selectedTab);\r\n    });\r\n  });\r\n\r\n  function activateTab(selectedTab) {\r\n    tabs.forEach(tab => {\r\n      if (tab.id === selectedTab.substring(1)) {\r\n        tab.classList.add('active');\r\n      } else {\r\n        tab.classList.remove('active');\r\n      }\r\n    });\r\n\r\n    tabButtons.forEach(button => {\r\n      if (button.dataset.tab === selectedTab) {\r\n        button.classList.add('active');\r\n      } else {\r\n        button.classList.remove('active');\r\n      }\r\n    });\r\n  }\r\n  // Устанавливаем активный класс для первой кнопки и таба при загрузке страницы\r\n  tabButtons[0].classList.add('active');\r\n  tabs[0].classList.add('active');\r\n}\r\n// получаем все ссылки и кнопки с атрибутом data-popup\r\nconst popupTriggers = document.querySelectorAll('[data-popup]');\r\n\r\n// добавляем обработчик клика на каждую ссылку и кнопку\r\npopupTriggers.forEach(function (popupTrigger) {\r\n  popupTrigger.addEventListener('click', function (event) {\r\n    event.preventDefault(); // отменяем действие по умолчанию\r\n\r\n    // находим id popup элемента\r\n    const popupId = popupTrigger.getAttribute('data-popup');\r\n\r\n    // находим popup элемент по id\r\n    const popupElement = document.querySelector(`#${popupId}`);\r\n\r\n    // закрываем все открытые popup элементы\r\n    const popupElements = document.querySelectorAll('.popup.show');\r\n    popupElements.forEach(function (popupElement) {\r\n      popupElement.classList.remove('show');\r\n    });\r\n\r\n    // открываем выбранный popup элемент\r\n    popupElement.classList.add('show');\r\n  });\r\n});\r\n\r\n// получаем все кнопки закрытия popup элемента\r\nconst closeButtons = document.querySelectorAll('.popup__close, .popup-close');\r\n\r\n// функция для закрытия popup элемента\r\nfunction closePopup() {\r\n  const popupElements = document.querySelectorAll('.popup.show');\r\n  popupElements.forEach(function (popupElement) {\r\n    popupElement.classList.remove('show');\r\n  });\r\n}\r\n\r\n// добавляем обработчик клика на каждую кнопку закрытия popup элемента\r\ncloseButtons.forEach(function (closeButton) {\r\n  closeButton.addEventListener('click', function (event) {\r\n    event.preventDefault(); // отменяем действие по умолчанию\r\n    closePopup();\r\n  });\r\n});\r\n\r\n// добавляем обработчик события нажатия клавиши ESC\r\ndocument.addEventListener('keydown', function (event) {\r\n  if (event.key === 'Escape') {\r\n    closePopup();\r\n  }\r\n});\r\n\r\n// ======== Маска для телефона ===============\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  var phoneInputs = document.querySelectorAll('input[type=\"tel\"]');\r\n\r\n  var getInputNumbersValue = function (input) {\r\n    return input.value.replace(/\\D/g, '');\r\n  }\r\n\r\n  var onPhonePaste = function (e) {\r\n    var input = e.target,\r\n      inputNumbersValue = getInputNumbersValue(input);\r\n    var pasted = e.clipboardData || window.clipboardData;\r\n    if (pasted) {\r\n      var pastedText = pasted.getData('Text');\r\n      if (/\\D/g.test(pastedText)) {\r\n        input.value = inputNumbersValue;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  var onPhoneInput = function (e) {\r\n    var input = e.target,\r\n      inputNumbersValue = getInputNumbersValue(input),\r\n      selectionStart = input.selectionStart,\r\n      formattedInputValue = \"\";\r\n\r\n    if (!inputNumbersValue) {\r\n      return input.value = \"\";\r\n    }\r\n\r\n    if (input.value.length != selectionStart) {\r\n      if (e.data && /\\D/g.test(e.data)) {\r\n        input.value = inputNumbersValue;\r\n      }\r\n      return;\r\n    }\r\n\r\n    if ([\"7\", \"8\", \"9\"].indexOf(inputNumbersValue[0]) > -1) {\r\n      if (inputNumbersValue[0] == \"9\") inputNumbersValue = \"7\" + inputNumbersValue;\r\n      var firstSymbols = (inputNumbersValue[0] == \"8\") ? \"8\" : \"+7\";\r\n      formattedInputValue = input.value = firstSymbols + \" \";\r\n      if (inputNumbersValue.length > 1) {\r\n        formattedInputValue += '(' + inputNumbersValue.substring(1, 4);\r\n      }\r\n      if (inputNumbersValue.length >= 5) {\r\n        formattedInputValue += ') ' + inputNumbersValue.substring(4, 7);\r\n      }\r\n      if (inputNumbersValue.length >= 8) {\r\n        formattedInputValue += '-' + inputNumbersValue.substring(7, 9);\r\n      }\r\n      if (inputNumbersValue.length >= 10) {\r\n        formattedInputValue += '-' + inputNumbersValue.substring(9, 11);\r\n      }\r\n    } else {\r\n      formattedInputValue = '+' + inputNumbersValue.substring(0, 16);\r\n    }\r\n    input.value = formattedInputValue;\r\n  }\r\n  var onPhoneKeyDown = function (e) {\r\n    var inputValue = e.target.value.replace(/\\D/g, '');\r\n    if (e.keyCode == 8 && inputValue.length == 1) {\r\n      e.target.value = \"\";\r\n    }\r\n  }\r\n  for (var phoneInput of phoneInputs) {\r\n    phoneInput.addEventListener('keydown', onPhoneKeyDown);\r\n    phoneInput.addEventListener('input', onPhoneInput, false);\r\n    phoneInput.addEventListener('paste', onPhonePaste, false);\r\n  }\r\n});\r\n\n\n//# sourceURL=webpack://gulp-starter/./src/js/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/main.js"]();
/******/ 	
/******/ })()
;